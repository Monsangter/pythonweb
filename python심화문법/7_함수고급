-일급객체


매개변수에 넘겨줄 수 있음
데이터처럼 사용 가능
리턴 값으로 사용될 수 있다.

파이썬에서는 함수도 일급객체이다.


# 일급객체란?
# - 다음과 같은 특징을 만족하는 객체를 말한다.
# 1. 데이터 처럼 사용 가능
# 2. 매개변수에 넘겨줄 수 있음
# 3. 리턴 값으로 사용할 수 있음

# 1.데이터 처럼 사용 가능

# 1)함수를 변수에 할당 가능하다
def func(x,y):
    return x+y

add = func
print(add(3,4))

# 2)리스트(튜플, 딕셔너리 등)의 자료구조에 할당 가능
def mul(x,y):
    return x * y

def div(x,y):
    return x / y

calculator = [mul, div]
print(calculator[0](5,6))

# 2. 매개변수로 넘겨 줄 수 있다.
def inputData():
    data = input("데이터 입력>>>")
    return data

def start(func):
    print("입력한 데이터는", func())

start(inputData)

# 3. 리턴값으로 사용될 수 있다.
def plusTen(a):
    return a + 10

def func(x):
    return plusTen(x)

print(func(5))

# 일급 객체라면 세가지 특성을 가지고 있다. 함수가 그 대표적 예.

===========
클로저
함수가 종료되어도 자원(변수)을 사용할 수 있는 함수.


-내부함수란 무엇인가?

함수 안에서 정의되는 함수.

-클로저가 될 수 있는 세가지 조건
내부함수여야 한다.
외부 함수의 변수를 참조해야한다.
외부함수가 내부함수를 반환해야한다


#1. 내부 함수
# 함수 안에 또다른 함수를 정의할 수 있다.

def outer(name):
    def inner():
        print(name, "님 안냐")
    return inner

#inner함수 객체가 남게됨
func = outer("startcoding")
func()

#중요한 특징
#outer에 스타트코딩 매개변수가지고 실행한후에 죽어버릴 것 같지만
#클로저라능 공간에 name지역변수가 들어 있음. 따라서 내부함수까지 부드럽게 실행가능

# 2. 클로저
# 함수가 종료되어도 자원을 사용할 수 있는 함수

# ** 클로저가 될 조건
# 1) 내부 함수여야 한다
# 2) 외부 함수의 변수를 참조해야 한다.
# 3) 외부 함수가 내부 함수를 반환해야 한다.

#2. 클로저
# 함수가 종료되어도 자원을 사용할 수 있는 함수.

# -클로저가 될 수 있는 세가지 조건
# 내부함수여야 한다.
# 외부 함수의 변수를 참조해야한다.
# 내부함수를 반환해야한다


def greeting(name, age, gender):
    def inner():
        print(name, "님 안녕하세요!")
        print(age, "님 안녕하세요!")
        print(gender, "님 안녕하세요!")
    return inner

closure = greeting('나미', 27, 'female')
closure()

print(dir(closure))

print(type(closure.__closure__))
print(closure.__closure__)

print(dir(closure.__closure__[0]))
print(closure.__closure__[0].cell_contents)

for i in closure.__closure__:
    print(i.cell_contents)

#클로저 객체의 메소드를 보면 __closure__ 이 있다.
#타입을 찍어보면 튜플임.
#튜플자체를 찍어보자.
#closure.__closure__도 오브젝트임 따라서 dir
#print(closure.__closure__[0].cell_contents) 해보면 나미라는 객체가 튀어나옴.

# 사용이유
# 전역변수 사용해서 사실 대체 가능 함.
# 하지만 전역변수 사용을 최소화 하는게 좋음. 네이밍 문제와 스코프 문제.

# 사실 파이썬에서는 클래스라는 강력한 기능이 있어서 클로저 대체 가능함.
# 그럼에도 배우는 이유는 제너레이터 데코레이터 이해에 중요.

========
이터레이터

-이터러블 객체란?

순서가 있는 자료형
for i in ~ :
문자열, 리스트, 튜플, 딕셔너리, range 객체

# 이터레이터 생성법

class Seasons:
    def __init__(self):
        self.season_list = ['spring', 'summer', 'autumn', 'winter']
        self.idx = 0
        self.max_num = 4
    #메소드 호출시 객체 자기자신 호출
    def __iter__(self):
        return self
    def __next__(self):
        if self.idx < self.max_num:
            curr_idx = self.idx
            self.idx += 1
            return self.season_list[curr_idx]
        else:
            raise StopIteration

for i in Seasons():
    print(i)

iter_obj = Seasons().__iter__()

print(iter_obj.__next__())
print(iter_obj.__next__())
print(iter_obj.__next__())
print(iter_obj.__next__())
print(iter_obj.__next__())

=============
-제너레이터란?
이터레이터를 만드는 함수

함수에서 yield를 사용하면된다. (생산하다)
제너레이터 표현식을 사용할 수 있다.
메모리 사용이 효율적이다.






