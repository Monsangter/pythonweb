
-절차지향 vs 객체지향
기능을 어떤 순서로 처리할 것인가에 초점을 맞춘다.
ex) 씻기, 옷입기, 밥먹기
순서가 중심이 되어 프로그래밍한다.

객체지향은 객체가 중심이되고, 객체를 정의하며 객체간 상호작용에 초점을 맞춘다.

프로그래밍 규모가 작다면 절차지향이 유리하다.

-클래스란
속성. 이름 체력 방어막 공격력
메소드. 동작

class 클래스이름:
  pass
pass는 나중에 구현하겠다는 키워드 이다.

인스턴스 = 클래스이름()

-클래스에 속성 추가
class Unit:
  def __init__(slef,name,hp,shield,damage): #먼저 생성자가 필요하다.
      self.name ~~~

unit 클래스에 메서드를 추가해 봅시다. 정보출력 메소드

class Unit:
  def __init__(self,name,hp,shield,damage): #먼저 생성자가 필요하다.
      self.name ~~~
      
  def __str__(self):
      print(f"[{self.name}] 체력 :{self.hp} 실드: {self.shield} 공격력 : {self.damage}")
      
probe = Unit("프로브",20,20,5)
print(probe)


====

-인스턴스 속성
객체마다 다르게 가지는 속성
class Unit:
  def __init__(slef,name,hp,shield,damage): #먼저 생성자가 필요하다.
      self.name ~~~

probe = Unit("프로브", 20, 20, 5)

zealot = Unit("질럿", 100, 60 , 16)

dragoon = Unit("드라군", 100, 80, 20)

각자만의 값을 가지고 있다.

클래스 안에서는 self.속성명
클래스 밖에서는 객체명.속성명

ex) probe.name

-클래스 속성
모든 객체가 공유하는 속성

class Unit:
  def __init__(slef,name,hp,shield,damage): #먼저 생성자가 필요하다.
      self.name ~~~
      unit.count += 1
      

예를들어 생성된 객체의 수를 알고  싶을때 사용.

-비공개 속성
클래스 안에서만 접근가능.

class Unit:
  def __init__(slef,name,hp,shield,damage): #먼저 생성자가 필요하다.
      self.name ~~~
      self.__hp=hp
 
 클래스 밖에서 접근하지 못하게 하고 싶을때는 hp 앞에 언더바 두개를 붙인다.
 private 속성임. 외부에서 변경할 수없고 참조만 가능하다. 다만 실제 불가능한건 아니고 어렵게 만드는 것일 뿐임.
 
 
=====
-인스턴스 메서드

인스턴스 속성에 접근할 수 있는 메서드.
항상 첫번째 파라미터로 self 를 갖는다.

hit메서드 구현

-클래스메서드
클래스속성에 접근하기 위해 사용한다.
클래스를 의미하는 cls를 파라미터로 받는다.
클래스메소드는 @를 붙여서 표시를 해준다(데코레이터)

class Unit:
  count = 0
  @classmethod
  def print_count(cls):
    print(f"전체 유닛 개수 : {cls.count}")
    
-정적메소드
인스턴스를 만들 필요가 없는 메서드
self를 받지 않는다
메서드가 인스턴스 유무와 관계없이 독립적으로 사용될때

class Math:
  @staticmethod
  def add(x,y):
    return x + y
    
-매직메서드
클래스 안에 정의할 수 있는 스페셜 메서드
특별한 상황에 호출된다.
__이름__의 형태로 되어 있다.
앞에 있는 언더바 두개를 던더라고도 하는데, 던더 메소드라고도 한다.

__init__과 같은 생성자도 매직 메서드에 포함된다

==========
-상속의 개념
클래스가 많아지며 공통된 속성과 메서드를 뽑아내 부모 클래스로 만든다.
이걸 자식 클래스에서 받아 쓰는 걸 상속이라 한다.
코드의 중복을 제거할 수 있으며, 유지 보수가 편해진다.

부모클래스에는 자식 클래스에서 공통된 부분을 가지고 있다.
ex)
item 클래스
속성 - 이름
메서드 - 줍기, 버리기

weapon 클래스
속성 - 이름, 데미지
메서드 - 줍기, 버리기, 공격하기
ㅅ


