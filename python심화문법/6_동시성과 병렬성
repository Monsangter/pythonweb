고급주제에 범위가 넓음

핵심개념과 모듈정도만 알아본다.

-프로그램
작업을 수행하는 명령어 집합.

-프로세스
실행중인 프로그램

-스레드
프로세스에서 실행되는 작업

프로세스는 기보넞ㄱ으로 하나의 스레드로 구성
경우에 따라 여러개의 스레드로 구성이 가능하다.
(멀티 스레딩)


롤로치면
게임하는 메인스레드
채팅하는 채팅스레드가 각각 존재해서 실행되는 거임.
물론 한꺼번에 진짜 동시에 실행되는 것은아니고
작은 조각단위로 번갈아 실행되지만 
어쨋건 거의 동시에 실행되는 것에 버금가게 빠르게 체인지하기에 동시성이라 한다.

-멀티 프로세스란?
코어가 여러게 있다는 것이다
각 cpu에서 cpu만의 작업을 진행하는 것이다.

이것을 병렬성이라한다. 이건 진짜로 동시에 한꺼번에 작업이 수행되는 것이다.
당연히 멀티 프로세스가 자원은 더 많이 먹음. 고비용.
멀티 스레딩은 비용에 있어 효율적.

=============

파이썬 스레딩 모듈

import threading

# 스레드에서 실행할 함수
def work():
    print("[sub] start")
    keyword = input("[sub] 검색어를 입력하세요 >>>")
    print(f"[sub] {keyword}로 검색을 시작합니다...")
    print("[sub] end")

#메인 스레드 실행 부분
print("[main] start")

#스레딩 모듈의 쓰레드 클래스에 인자 넘겨줌 클래스 생성과 같다
worker = threading.Thread(target=work)
worker.start()

print("[main] 메인 스레드는 자기할 일을 합니다...")
print("[main] end")

[main] start
[sub] start
[main] 메인 스레드는 자기할 일을 합니다...
[sub] 검색어를 입력하세요 >>>[main] end
1
[sub] 1로 검색을 시작합니다...
[sub] end


          이게 멀티 스래딩. IO작업 필요시 많이 사용한다.

-데몬 스레드
메인 스레드 종료시 서브스레드도 같이 종료되게된다.
worker.daemon= True

import threading
import time

#주식 자동매매

#매수타이밍엔 매수 프로그램이 매도타이밍엔 매도프로그램이 실행돼야 한다.
#한개의 프로그램에서 실행하기에는 복잡해지니까 따로 프로그램을 실행하기도 한다.
# 이걸 한번 스레드로 구현해보자

# 매수 스레드
def buyer():
    for i in range(5):
        print("[매수] 데이터 요청 중")
        time.sleep(1)
        print("[매수] 데이터 분석 중")
        time.sleep(1)
        print("[매수] 지금이 매수 타이밍인가...?!?!")
        time.sleep(1)
        print("[매수] 매수 진행!!")
        time.sleep(1)


# 매도 스레드
def seller():
    for i in range(5):
        print("[매도] 데이터 요청 중")
        time.sleep(1)
        print("[매도] 데이터 분석 중")
        time.sleep(1)
        print("[매도] 손절 or 익절?")
        time.sleep(1)
        print("[매도] 눈물을 머금고 손절합니다.")
        time.sleep(1)

# 메인 스레드
print("[메인] start")
buyer = threading.Thread(target=buyer)
seller = threading.Thread(target=seller)
buyer.start()
seller.start()

buyer.join() # 매수 스레드가 종료될 때까지 메인 스레드가 기다린다.
seller.join() # 매도 스레드가 종료될 때까지 메인 스레드가 기다린다.
print("[메인] 장이 종료되었습니다.")


실제 프로그램 사용시 이렇게 간단하게만 사용이 불가하다. 어떤 변수에 동시에 접근하게 될 수도 있고, 시간을 어떻게 맞춰가는가도 어렵다.
동시성 처리에대해서는 더 깊게 학습해보자.

=============
멀티프로세싱 모듈 사용법

import multiprocessing as mp

#프로세스에서 실행할 함수
def sub_process(name):
    print("[sub] start")
    print(name)
    print("[sub] end")


#메인 프로세스
if __name__ == "__main__":
    print("[main] start")
    p = mp.Process(target=sub_process, args= ('startcoding',))
    p.start()
    cp = mp.current_process()
    print(f"[main] pid : {cp.pid}")
    print("[main] end")
    
from multiprocessing import Process
import time
========
class Subprocess(Process):

    def __init__(self, name):
        Process.__init__(self)
        self.name = name

    def run(self):
        print(f"[sub] {self.name} start")
        time.sleep(5)
        print(f"[sub] {self.name} end")

if __name__ == "__main__":
    print("[main] start")
    p = Subprocess(name = 'startcoding')
    p.start()
    p.join()
    print("[main] end")
=======
from multiprocessing import Process
import time

class Subprocess(Process):

    def __init__(self, name):
        Process.__init__(self)
        self.name = name

    def run(self):
        print(f"[sub] {self.name} start")
        time.sleep(5)
        print(f"[sub] {self.name} end")

if __name__ == "__main__":
    print("[main] start")
    p = Subprocess(name = 'startcoding')
    p.start()
    time.sleep(1)
    #프로세스가 살아있는지 검사

    if p.is_alive:
        p.terminate()

    print("[main] end")

# 추가적으로 동시성과 병렬성에 대해 공부해볼 것.
# 1. 스레드간 데이터 처리.( lock )
# 2. 프로세스간 데이터 전송 (queue,pipe)
# 3. 속도 비교 (타임 스립 써도 되고 오래걸리는 연산 써봐도 좋음)
# 4. 운영 체제와 메모리. 스레드간 프로세스간 메모리를 어떻게 사용 공유하는가, 비용은 어떻게 드는 가.

    
