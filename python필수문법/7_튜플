-튜플의 특징

시퀀스자료형
순서가 있다.

수정, 추가, 삭제가 불가능한 리스트.
읽기 전용이다.

쓰는 이유?
메모리 사용이 효율적.
리스트는 메모리영역이 바뀌는데에 반해 튜플은 정해져 있다.

읽기만 가능하기 떄문에 데이터 손실 염려가 없다.

튜플은 소괄호를 사용한다.
하지만 괄호자체를 생략할 수 있다.
튜플 = 데이터, 데이터, 데이터, . .. 

() 함수
[] 리스트
{} 딕셔너르 f스트링

담는 데이터.
리스트와 마찬가지로 숫자, 문자열, 불린 모두 담을 수 있다.

주의 사항
변수를 하나만 담을떄는 주의해야한다.
a = (30,)
처럼 뒤에 콤마를 붙여줘야한다. 안 붙이면 그냥 단순 변수대입으로 컴퓨터가 인식한다.

-튜플을 리스트로 만들기
a = tuple([5,6,7])
자료형이 바뀌게 된다.

x = list(range(10))
a = tuple(range)
range객체는 튜플이나 리스트 자료형으로 변환이 가능하다.

튜플을 리스트로 바꿀수도 있따
x = 1,2,3
y = list(x)

-패킹과 언패킹

numbers = 3,4,5 #패킹
a, b, c = numbers #언패킹

3,4,5로 선언된 튜플의 각각 데이터들이 a,b,c 변수에 할당된다.

패킹: 여러개의 데이터를 하나의 변수에 할당
언패킹: 컬렉션의 각 데이터를 각각 변수에 할당.

컬렉션이란 튜플 리스트 딕셔너리 셋같은 자료형.



실활용

a,b = b,a
이런식으로 값을 간단하게 자리 바꿔줄 수 있다.
파이썬만 있는 신기한 기능. 씨는 tmp변수 만들어서 옮기고 해줘야댐.


튜플함수

a = 10,20,30,40,30

특정값 인덱스 구하기  a.index(20)
특정값의 개수 a.count(30)
최대값,최소값 max(a), min(a)
합계 sum(a)

=====
딕셔너리의 특징

시퀀스 자료형

키와 데이터를 가지고 있다

사전 형태의 자료를 만들때 편리

딕셔너리 = {키1:데이터1, ~ , ~ }

문자열, 숫자, 불린 모두 사용할수 있으며 데이터에는 튜플과 리스트를 넣을 수도 있다.


할당하기

딕셔너리["키"] = 데이터

삭제하기
del 딕셔너리["키"]


딕셔너리 함수

stock.items() 키와 데이터 쌍
stock.keys()  키
stock.values()데이터

#딕셔너리
#:사전형태의 자료형

stock_a = {"삼성전자":82000, "LG전자":150000}

#이런식 표기가 들여쓰기 자동으로 되면서 가시성 편함
#딕셔너리만들기
stock_b = {
    "삼성전자" : [10000,81500,82000,81500,82000],
    "LG전자" : (15000, 14900, 14800, 15100, 15200)
}

stock_c = {
    "삼성전자" : {
        "현재가" : 82000,
        "보유수량" : 5,
        "매수단가" : 81000,
    }
}

print(stock_a)
print(stock_b)
print(stock_c)

#딕셔너리 접근하기
print(stock_a["삼성전자"])
print(stock_c["삼성전자"]["보유수량"])

# 딕셔너리 할당하기

stock_a["삼성전자"] = 85000
print(stock_a)

#딕셔너리 삭제하기
del stock_a["LG전자"]
print(stock_a)

#딕셔너리 함수
stock_d = {
    "삼성전자" : 82000,
    "하이닉스" : 82000,
    "네이버" : 82000,
    "카카오" : 82000,
}

#items(): 키와 데이터 쌍
print(stock_d.items())
#얘만의 자료형이 있기때문에 좀 특이하게 나옴.

for item in stock_d.items():
    print(item)

#시퀀스 자료형이기 떄문에 보통 이렇게 사용할 수 있다.

#keys() : 키
for key in stock_d.keys():
    print(key)

# values() : 데이터

for value in stock_d.values():
    print(value)




