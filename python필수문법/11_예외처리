예외처리가 필요한 이유

프로그램을 만들어도, 사용자는 꼭 의도한대로 프로그램을 사용하지 않는다. 즉 예외가 발생할 수 있는데, 이는 프로그램을 죽일 수 있다.
이를 방지하기위해 예외처리를 하는것

try:예외가 발생할 수 있는 코드
except 예외발생시 실행할 코드
else: 발생하지 않은 경우 실행한 코드
finally 항상 실행할 코드

#원화를 입력, 환율 입력 -> 달러 값

won = input("원화 금액을 입력하세요>>>")
dollar = input("환율을 입력하세요>>>")

try:#예외가 발생할 수 있는 코드
    print(int(won)/int(dollar))
except ValueError as e:#예외 발생시 실행되는 코드, 앨리아스를 지정해 출력해줄 수도 있다.
    #구체적으로 에러를 지정해줄 수도 있다. 밸류에러는 인트인데 문자열을 입력했을떄 발생하는 오류
    print("문자열 예외가 발생했습니다.", e)
except ZeroDivisionError as e:
    print("0으로 나눌 수 없습니다.", e)
else:
    print("예외가 발생하지 않았을떄 실행되는 코드")
finally: # 파일 닫기
    print("예외 발생하든 아니든 항상 실행되는 코드")

print("프로그램이 끝났나요?")

======
raise구문 사용법

에러를 강제로 발생시키기 위해 사용한다.

raise Exception
raise Exception("에러메시지")

-예외 계층구조

모든 내장 에러는 계층적 구조를 지닌다. 예를들어 zerodivisonerror 는 산수에러에 포함.
특정에러를 알 수 있는 경우에는 예외처리시 상세히 적어주는게 좋다.

-에러만들기
직접 내가 에러만들어 처리할 수도 있다.
class 예외(Exception):
  def __init__(self):
    super().__init__("에러 메시지")
    
# raise 구문을 사용해 에러를 강제로 발생시켜 보자.

try:
    num = int(input("음수를 입력해주세요>>>"))
    if num>= 0:
        raise Exception("양수는 입력 불가")
except Exception as e: #위에서 raise로 만든 exception을 가져올 수 있다.
    print("에러 발생!", e)


class PositiveNumberError(Exception):
    def __init__(self):
        super().__init__("양수는 입력 불가")

try:
    num = int(input("음수를 입력해주세요>>>"))
    if num>= 0:
        raise PositiveNumberError
except PositiveNumberError as e: 
    print("에러 발생!", e)

