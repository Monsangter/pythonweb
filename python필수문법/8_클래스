클래스

객체를 만들기 위한 설계도


객체

설계도로부터 만들어낸 제품.



-클래스란?

속성
체력 공격력 방어력 이동속도

메소드
위치로 이동, 공격, 아이템 사용 , 귀환

class 클래스이름:
  def 메서드이름(self):
    명령블록
    
class Monster:
  def say(self):
    print("나는 몬스터다")
    
모든 메소드의 첫번쨰 매개변수로는 self가 들어간다


-호출하기

인스턴스 = 클래스이름()
인스턴스.메서드()
goblin=Monster()
goblin.say()

파이썬에서는 자료형도 클래스이다.

class Monster:
    def say(self):
        print("나는 몬스터다!")

goblin=Monster()
goblin.say()

# 파이썬에서는 자료형도 클래스다
a = 10
b = "문자열객체"
c = True

print(type(a))
print(type(b))
print(type(c))

#b객체. 문자열 객체안에 있는 메소드들을 확인할 수 있음.
print(b.__dir__())

=========
생성자

클래스를 만들때는 속성과 메소드 두개가 필요하다.
속성은 클래스를 설명하는 특징
메소드는 동작

-속성의 추가
class Monster:
  def say(self):
    print("나는 몬스터다")
    
여기에 체력 공격력 이속을 넣어보자


class Monster:
    def __init__(self, health, attack,speed):
        self.health = health
        self.attack = attack
        self.speed = speed
        
__init__메서드는 인스턴스를 만들떄 반드시 호출되는 메서드이다.

goblin = Monster(800,120,300)

self는 매개변수로 치지 않음. 인스턴스 자기자신을 말한다.
ex) self.attack = attack 
현재 호출되고 있는 goblin 인스턴스의 attack 객체에 attack 매개변수 값을 넣어라.

-메소드 추가

체력감소, 체력가져오기

class Monster:
    def __init__(self, health, attack,speed):
        self.health = health
        self.attack = attack
        self.speed = speed    
    def decrease_health(self,num):
      self.health -= num    
    def get_health(self):
      return self.health

goblin.decrease_health(100)
print(goblin.get_health())

=========
상속

클래스들간의 속성이나 메소드를 물려줄 수 있음.

-상속의 개념
부모클래스로부터 자식클래스는 속성과 메소드를 그대로 가져올 수 있다.

-언제쓰나?
땅몬스터 물몬스터 공중몬스터 같이 몬스터의 자식분류들이 있따고 해보자. 각각 하나씩 전부 클래스구현하면 가독성도 떨어지고 유지보수도 힘들어진다.
비슷한 공통코드가 많이 있다면 공통된 부분을 뽑아서 하나의 부모메소드를 만들어줄 수 있지 않을까?

부모클래스 정의

class Monster:
    def __init__(self,name, health, attack):
        self.name = name
        self.health = health
        self.attack = attack
    def move(self):
      print("지상에서 이동하기")
      
자식 클래스 정의

class Wolf(Monster):
  pass
  
class Shark(Monster):
  def move(self):
    print("헤엄치기")
    
    
class Dragon(Monster):
  def move(self):
    print("날기")
    
이닛이 모두 생략돼 있다. 몬스터 클래스를 상속받고 있다. 즉몬스터의 생성자가 호출된다.
pass는 그냥 정의만하고 싶을때 사용한다.

나머지는 메서드 오버라이딩이다. 부모안의 메서드를 각 몬스터의 특징에 맞게 재정의 해줬다.
      
=======
rpg게임 업데이트

드래곤 클래스에 인스턴스 속성으로 3개 스킬추가

드래곤이 스킬을 쓰면 속성 에 하나가 무작위로 사용된다.
      
#상속
# : 클래스들이 중복된 코드를 제거하고 유지보수를
# 편하게 하기 위해 사용.

#클래스 변수
#: 인스턴스들이 모두 공유하는 변수. 
# 반면 멤버변수처럼 생성자로 매개변수값을 통해 인스턴스가 갖는 값은 각각 고유의 값임.

import random
# 부모 클래스
class Monster:
    max_num = 1000
    def __init__(self, name, health, attack):
        self.name = name
        self.health = health
        self.attack = attack
        Monster.max_num -= 1
    def move(self):
      print(f"[{self.name}]지상에서 이동하기")

# 자식 클래스
class Wolf(Monster):
    pass

class Shark(Monster):
  def move(self):
    print(f"[{self.name}]헤엄치기") # 메소드 오버라이딩
    
class Dragon(Monster):
  def __init__(self, name, health, attack):
    super().__init__(name, health, attack) # 부모 클래스의 생성자를 가져올 수 있다.
    self.skills = ("불뿜기", "꼬리치기", "날개치기")

  def move(self):
    print(f"[{self.name}]날기")
  def skill(self):
    print(f"[{self.name}] 스킬 사용 {self.skills[random.randint(0,2)]}" )

wolf = Wolf("울프",1500, 200)
wolf.move()
print(wolf.max_num)

shark = Shark("샤크",1500, 200)
shark.move()
print(shark.max_num)

dragon = Dragon("드래곤", 1500, 200)
dragon.move()
dragon.skill()
print(dragon.max_num)
#가장 싫어하는건 중복.. 드래곤 생성할때마다 이렇게 호출할거임? 아니다. 드래곤 클래스의 멤버변수에 스킬을 추가해주자.
#Dragon = Dragon("드래곤",1500, 200, ("불뿜기", "꼬리치기", "날개치기")) #스킬을 고정돼 있으니 튜플로
#Dragon.move()

========

실습문제풀이

class Item():
    def __init__(self,name,price,weight,isdropable):
        self.name = name
        self.price = price
        self.weight = weight
        self.isdropable = isdropable    
    def sale(self):
        print(f"[{self.name}] 판매가격은 [{self.price}]")
    def discard(self):
        if self.isdropable == False:
            print(f"[{self.name}]은 버릴 수 없습니다!")
        else:
            print(f"[{self.name}] 버렸습니다.")

class WearableItem(Item):
    def __init__(self, name, price, weight, isdropable,effect):
        super().__init__(name,price,weight,isdropable)
        self.effect = effect
    def wear(self):
        print(f"[{self.name}]을 착용했습니다. {self.effect}")

class UsableItem(Item):
    def __init__(self, name, price, weight, isdropable,effect):
        super().__init__(name,price,weight,isdropable)
        self.effect = effect
    def wear(self):
        print(f"[{self.name}]을 사용했습니다. {self.effect}가 지속됩니다.")

    # 인스턴스 생성

    sword = WearableItem("이가닌자의 검", 30000, 3.5, True, "체력 5000증가, 마력 2000증가")
    sword.wear()
    sword.sale()
    sword.discard()





