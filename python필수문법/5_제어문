-제어문 사용의 이유

프로그램은 기본적으로 위아래 순차적으로 실행

명령 어러개중 한개를 선택해 실행하고 싶을때. -조건문. 
명령을 반복해서 실행하고 싶을때 -반복문

치킨 피자 - 조건문
유트브 영상보기 -반복문

# 조건문
# : 조건에 따라 실행할 명령이 달라지는 것

origin_pass = "1234"
input_pass = input("패스워드를 입력하세요 >>>")

if input_pass == origin_pass: 
    #조건이 참이라면
    print("로그인 성공!")
elif input_pass == "":
    #조건 a 거짓, 조건 b참
    print("아무것도 입력하지 않았습니다.")
else:
    # 조건 A 거짓
    print("로그인 실패!")
    
=====
실습문제
    
sub_number = int(input("현재 구독자 수를 입력하세요 >>>"))

if sub_number >= 1000:
    print("수익창출이 가능합니다!")
else:
    print("수익 창출 불능")
    
    
kor_sco = int(input("국어 >>>"))
eng_sco = int(input("영어 >>>"))
math_sco = int(input("수학 >>>"))

avg = kor_sco+eng_sco+math_sco/3

if 0 <= korean <= 100 and 0 <= math <= 100 and 0<= english <= 100:
    if avg >= 60:
        print("불합격")
    else:
        print("합격")
else:
    print("잘못 입력하였습니다.")

#방법 2
#if kor <0 or kor > 100 eng < 0 or eng> 100 ...
# 이런식으로 or연산으로 처리할 수도 있다.

===

리스트 자료형

리스트를 사용하는 이유
10개의 동물이름을 저장하는 상황.

animal1 = ~
animal2 = ~
...
변수를 어러개 만들어야하는 상황이 생김.

리스트를 활용하면 변수선언이 필요없다

animals = ["사자",~,~,~]
데이터는 숫자든 문자든 불린이든 다 넣어줄수 있다.

데이터는 인덱스를 통해 구분해준다.

-인덱스
0부터 시작. 컴퓨터니까~

데이터 추가
리스트.append(데이터)
리스트[인덱스] = 데이터
del 리스트[인덱스]

슬라이싱
리스트의 특정인덱스를 뽑아온다
리스트[시작:끝+1]

길이 len(리스트)
정렬 리스트.sort()

pullup_cnt = []
number = 1
sum = 0

while number < 8:
    x = int(input(f"{number}일차 턱걸이 횟수 >>>"))
    pullup_cnt.append(x)
    sum += x 
    number += 1

print(int(sum/7))

=====
반복문

반복문 사용의 이유

반복적 작업을 코드로 작성하기 위해.

-시퀀스 자료형
순서가 있는 자료형.

리스트
문자열
range객체
튜플, 딕셔너리

-for 사용법

for 변수 in 시퀀스자료:
  명령문
  
for a in [1,2,3,4]:
  print(a)
  
-range(10)
순서형 데이터 만들때 사용.
0~9까지의 숫자를 포함하는 range 객체를 만들어준다. 

#반복문
# : 반복해서 명령을 사용하고 싶을 때

# 시퀀스 자료형
# : 순서가 있는 자료형
# 1. 리스트
# 2. 문자열
# 3. range 객체
# 4. 튜플
# 5. 딕셔너리

# for 문
# -리스트 사용
champions = ["티모", "이즈리얼", "리신"]

for champion in champions:
    print(f"선택한 챔피언은{champion}입니다.")

# - 문자열 사용
fighting_message = "자신감을 가지자! 나에게 한계란 없다!"

for word in fighting_message:
    print(word)

# - range 사용
# range(10) 0~9
# range(시작, 끝+1)
for i in range(1,10,2):# 두칸씩 쩜프
    print(i)
    
========
while 문

포문과의 차이?
포문은 반복횟수가 정해져있을때, 와일은 보통 횟수가 정해지지 않았을때 사용한다.

i = 0
while i < 10:
  print(i, "번째 다짐")
  i += 1
  
-무한루프

while True:
  반복명령
  
  if 조건식:
    break

반복문끼리도 중첩이 된다.
====
문제를 많이 푸는 이유.


프로그래밍 은 문제해결하는 것.
작은 문제들을 해결해나가삼. 엄청난 도움이 됨.

prac_kor = ["안녕","잘가","키키"]
cnt = 0
for i in prac_kor:
    print(i)
    x = input()
    if i == x:
        cnt += 1
    elif i != x:    
        break
print(f"맞은 개수 : {cnt}")






