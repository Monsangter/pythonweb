
무엇이든 만들어낼 수 있다는 자신감

작동원리를 들으면 머리속에 코드가 펼칠 수 있도록 논리적으로 생각할 수 있는 힘.


======

-장고란 무엇인가?

플라스크와 장고는 투탑을 달리고 있다.

batteries included 
커뮤니티 방대

각종 블로그와 크롤링.
xml json 전부 가능

안전성
계정정보 안전관리 
세션관리.
해당유저 강제 로그아웃 가능
sql 인젝션 크로사이트 ~~~ 등 다 막아줌

shared nothing
아키텍쳐가 독립적이기 때문에 해당 레이어에서 언제든지 교체 가능 의존성 없음.
어떤레벨에서도 교체 가능. 데이터 서버 어플리케이션 서버 어디에 트래픽이 늘어나든 유연하게 대응하고 크기 변경 가능
사용자가 많은 사이트 , 인스타 디스커스

메인테이너블

유지보수쉽고 디자인 원칙과 패턴의 적용

dry
dont repeat yourself



-refeerences
토스 코인빗 숨고 딜리버리 히어로 코리아

-인기잇는 플엠웍?

인기 측정 특별수단은 없다. 하지만 스택오버플로우, 인디드 us position 등 질문수와 포지션 수가 훨씬 많음.


-프레임워크 vs 라이브러리?
고객의 요청이든 엔터든 트리거에의해 서비스를 하게 되는데, 
프레임워크는 이 서빙의 주체라고 생가갛면된다.

장고가 화면을 띄워주는 주체지 내 코드가 주체가 아님. 장고가 갖다 걍 씀.

반면 라이브러리는 서빙에 내 코드가 주체가되고 사용하게 된다.


-장고의 탄생

신문사 웹팀에서 2003년부터 개발. 공통모듈과 코드패턴을 뽑아내 재사용.

오픈소스로 공개되었다.

사용자가 웹서버에 요청함. 그다음 urls.py로 유효한 url인지 확인, 그다음 뷰를 거처 어떤일을 처리하는지 데이터베이스 입출력이 있느지.
렌더링이 필요하면 템플릿의 코드를 갖고와 뷰가 템플릿 코드를 html로 변환해 웹서버로 갖고와 유저에 서비스

모델,뷰,테플릿. mtv

url과 뷰 사이에 미들웨어가 있는데, 유효 url 인지 확인 후에 미들웨어를 거쳐 뷰로 넘어간다. 
로그인도 할 수 있고 인증도 할수 있고 트래픽도 감시할 수 있음. 현업엣 가장 많이 쓰임

===========

장고프로젝트 시작

-파이썬 인핸스먼트 프로포졀
pep8 coding convention

여러사람이 협업해도 모두가 읽기 편한 코드를 작업하기 위한 기본 규칙

최대한 통일성지키기.

한줄의 문자열읜 79자
독스트링은 72자 (따움표 세개로 이루어진 문자열임)
snake_case 사용
모듈레벨 상수는 모두 대문자
classname은 capitalized word
한줄로된 if try except for while 구문은 사용하지 않는다.

컨벤션은 합의.

하지만 로컬룰이 더 중요.

- 하지만 장고에서는?

한줄의 문자열은 119자
독스트링은 72자


-zen of python

pep 20

드러운것보단 예븐것

복잡한것보단 간단
난해보단 복잡 
묵시적인것보단 명시적
가독성이 중요
중첩보단 플랫하게
과한것보단 덜하게
특이케이스들은 이런 규칙들을 부술만큼 특이하지 않다.




파이썬 콘솔에서 import3 하면 볼 수 있다.

-프로젝트 시작

파이썬은 
파이썬은 가상환경을 만들어 사용하는 것이 원칙.

python3 -m venv venvs/가상환경명
source venvs/가상환경명/bin/activate

이후 pip install django


django-admin startproject shrinkers


python3 manage.py startapp shortner

이후 쇼트너를 세팅즈에 들어가 인스톨트앱스에 추가해줘야한다.

python manage.py runserver

==========

데이터베이스 모델링

db모델링이란?

아이템에 속성 데이터를 사전에 정의하는것.
해당 정보가 어떤 규격화된 정보를 담을 것인지.

저장할 포맷.

장고에서는 id는 pk를 정의하지 않아도 자동정의
fk를 사용하면 뒤에 xxx_id를 자동 생성

만약 id말고 다른 컬럼을 pk로 쓰고 싶다면 해당 컬럼을 정의해서 pk true하면됨

디폴트는 id로 숫자로 자동증가인데 pk는 스트링 뿐만 아니라 문자열이 될 수도 있음

fk는 다른 테이블에 있는 pk를 해당 테이블에 저장해 관계를 사용하겠다.

만약 job에 위치정보를 추가하고 싶은데, 해당 위치가 다른 테이블에 있다면. 로케이션으로 정의해줄시
location_id로 데이터 컬럼 생성

장고에는 이런 특수한 기능이 있고

다양한 컬럼 타입이 있음.

charfield
스트링

인티저필드 2147483648

포지티브 인티저필드 양수만

빅인티저 필드 엄청 긴 숫자.
기본 프라이머리키가 된다

포지티브 빅인티저 양수필드만

데이트필드
날짜

데이트타임필드
날짜시간

불리안필드
트루폴스 플래그
데이터베이스는 트루폴스를 숫자로 표현함

텍스트필드
길이가 정해지지 않은 문자열


이메일필드
이메일포맷

json필드
제이슨 포맷


오토필드
오토인크리먼트


빅오토필드
빅인티저


포레인키
다른테이블 pk참조 필드

장고는 처음에 미그레이션 하면 유저테이블을 자동으로 만듬

-모델링실습


장고가 가지고 있는 기분적인 테이블을 만들기 위해 첫번째 미그레이션 하고,

python3 manage.py migrate

인증이나 어디민이나 세션등 장고 프레임워크가 필요한 부분.
만든 앱에 db를 설정해 넣어준다.



from django.db import models

# Create your models here.

#한국같은경우는 price 그냥 인티저로 해도됨. 외국은 다른 단위잇지만.

# 미그레이션 해줘야됨.
# class PayPlan(models.Model):
#     name = models.CharField(max_length=20)
#     price = models.IntegerField()
#     updated_at = models.DateTimeField(auto_now=True)
#     create_at = models.DateTimeField(auto_now_add=True)

python3 manage.py makemigrations


모델을 가지고 페이퍼 플랜이 만들어짐.

그리고 다시 미그레이트


데이터베이스에서 유저테이블이 있는데

python3 manage.py createsuperuser


이메일 패스워드설정

-디비버
장고에서 mysql사용하려면 클라이언트 설치해야되는데 윈도에선 설치 잘안댐.


왼쪽상단에서 쁠러스표시. 글고 테스트 커넥션으로 드라이버 받아줌.
그리고 피니시


auth로 시작하는 파일명은 장고프레임워크가 사용.

auth_user에서 데이터 보면 슈퍼유저도 있고
shortner_payplan이라고 우리가 만든 db가 있음.

장고 어드민에서도 똑같이 볼 수 있는데 디비버로 보는게 더 편함.

런서버해서 어드민 계정 접속 해서 유저보면 어드민 추가 돼 있긴함.
근데 안편해서 디비버란 디비엠에스 소개시켜준거.

유저테이블안에 페이플랜의 프라이머리 키값을 외래키로 넣고 싶엇음.
디비버 보면 장고가 이미 만들어놈. 그래서 이거 어떻게하는지보장

-프로젝트 받아보기.


깃을 다운받은후 커맨드에 
git clone 복사한 깃허브 주소를 누르면 바로 복사가 된다. 
히지만 최신버전 코드이기 떄문에

git reset --hard ef3898b0bb09f9ae14b194f512246c43f45a174a
과 같은 식으로 리셋가능하다.

깃허브 주소에 가서 커밋내역 확인 가능 !
사실 앞 7자리만 적어도 된다

-데이터베이스 모델링
유저 데이터 베이스는 두가지로 정의할 수 있다. 현재 장고는 시작하자마자 유저 데이터 베이스를 만든다. 하지만 이러면 컬럼을 추가하기 쉽지 않음.
이 유저를 어떻게 넣을 것인가?

가장 편한 방법은 앱스트랙 유저.
현재 가지고 있는 유저를 추상화해서 페이플랜을 넣겠다. 

class Users(AbstractUser):
pay_plan = models.ForeignKey(PayPlan, on_delete=models.DO_NOTHING)

class UserDetail(models.Model):
user = models.OneToOneField(User, on_delete=models.CASCADE)
pay_plan = models.ForeignKey(PayPlan, on_delete=models.DO_NOTHING)

페이플랜을 넣을 수도 있고
유저 디테일을 만들어서 원투원 필드에 유저가 가지고 있는 추가정보를 넣어주는 방법이 있다.
위는 한태이블이 쌓이고
밑은 두테이블이 쌓임.

앱스트렉 모델을 만들었으면 위로 쓰면 되고
장고기본모델을 사용햇다 추가한다면 밑을 사용


앱스트랙트 유저에 
앱스트랙트 유저에 추가 
앱스트랙트 유저에 추가 정보를 














































































