파이썬 다운로드후 설치.
터미널과 아이들에서 실행.

터미널은 명령프롬프트 창으로써
입력하면 결과를 바로 반환해준다.

python3 를 치면 파이썬 프롬프트로 진입. 이후 명령어 사용이 가능하다.

print("hello python")

idle을 검색해 바로 파이썬 프롬프트를 실행시켜 줄 수도 있다.
왼쪽상단에서 newfile을 통해 한줄 이상의 명령어를 입력하고 run 시켜줄 수도 있다.

idle편집기를 사용하면 불편한점.
모양이 예쁘지 않음. 자동완성 기능 없음. 파일탐색기 기능이 없음. 따라서 소스코드 편집기를 사용한다

===
vscode 

소스편집기를 사용하는 이유.

1 파일 탐색 기능을 폴더 및 폴더 정리 가능
2 코드 자동 완성 기능
3 디버깅이 쉬움
4 유용한 단축키가 많다

-설치

검색후 설치한다.
실행후 get started 창 꺼줌.

루트 폴더를 지정해줘야한다.
왼쪽 상단에서 파일, 오픈. 그리고 폴더를 지정해준다.
방금한 작업이 루트폴더 지정이라고 할 수 있다.

창에 동그라미 잇으면 저장 안된거임 컨트롤 에스 하삼.

-익스텐션
vscode에서 파이썬을 실행하려면 익스텐션을 설치해줘야한다.
마이크로소프트에서 만든거 설치하삼.
오른쪽아래에 경고창 뜨는데 리로드 윈도우 하면 됨.

오른쪽 위에 재생 버튼 누르면 실행이된다.

-유용한것.
커맨드 cv가 일반적인 복붙이라면 
옵션 쉬프트, 아래위 방향키로 복사가 가능하다. 드래그 해놓으면 어려줄 이렇게 복사 가능.
또 옵션을 누른상태로 클릭 클릭하면 커서 여러개 동시에 사용가능하다. 멀티커서 기능.

======

가상환경

가상환경 사용의 이유?
서로 다른 버전의 패키지를 활용하는 프로젝트들이 있다고 해보자. 

한 환경 안에서는 하나의 패키지 버전만 존재할 수 있기 떄문에, 가상적으로 다른 버전을 가진 환경들을 만들어 작업한다.

-설치하기

venv라는 모듈을 이용해 설치할 수 있다.

python3 -m venv venvs
        모듈이라는 옵션  모듈이름  폴더이름
        
source ./myvenv/bin/activate
로 진입

source 명령어는 스크립트 파일을 수정한 후 수정된 값을 바로 적용하기 위해 사용하는 명령어이다.

deactivate로 가상환경 종료



-모듈 패키지
모듈이나 패키지는 다른 사람들이 만들어논 파이썬 파일이다.

가상환경 진입이후 pip list 하면 설치된 패키지와 버전 목록을 확인할 수 있다.

pip install 패키지, 모듈명

시 우리가 만든 가상환경안에 패키지를 설치할 수 있다.

앞으론 우리가 만든 가상환경폴더 아래에 폴더를 만들어 작업한다.
터미널상에서 가상환경에 진입할 필요없이 파이썬을 실행하면 이제 이 가상환경안에서 실행된다.

실행버튼 누르면 자동으로 저장까지 된다


